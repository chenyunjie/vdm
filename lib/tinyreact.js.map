{"version":3,"file":"tinyreact.js","sources":["../src/vnode.js","../src/dom.js","../src/utils.js","../src/event.js","../src/lifecycle.js","../src/patch.js","../src/diff.js","../src/component.js","../src/h.js","../src/index.js"],"sourcesContent":["\nconst NodeType = {\n  Text: 'text',\n  Node: 'node',\n  Component: 'component'\n};\n\nclass RenderNode extends Object {\n  // 父元素节点 RenderNode类型\n  parent;\n}\n\n/**\n * 普通dom元素虚拟节点\n */\nclass VNormalNode extends RenderNode {\n\n  // 标签\n  tag;\n\n  // 属性\n  attr;\n\n  // 子元素\n  children;\n\n  // 真实元素节点\n  element;\n\n  // 元素类型\n  type;\n\n  // 所属组件\n  holder;\n\n  constructor(tag, attr, children) {\n    super();\n    this.tag = tag;\n    this.attr = attr;\n    this.children = children;\n    this.type = NodeType.Node;\n  }\n\n}\n\n/**\n * 文本元素节点\n */\nclass VTextNode extends RenderNode {\n\n  // 文本内容\n  text;\n\n  // 所属组件\n  holder;\n\n  constructor(text) {\n    super();\n    this.text = text;\n    this.type = NodeType.Text;\n  }\n}\n\n/**\n * 组件节点\n */\nclass VComponentNode extends RenderNode {\n  // 实际渲染节点\n  renderVNode;\n}\n\nfunction issame(n1, n2) {\n  return n1 && n2 && ((n1.tag != undefined && n1.tag != null) && n1.tag == n2.tag || (n1.type == NodeType.Text && n1.type == n2.type && n1.text == n2.text));\n}\n\nexport {\n  VNormalNode,\n  VTextNode,\n  VComponentNode,\n  NodeType,\n  RenderNode,\n  issame\n}","import { VNormalNode, VTextNode, VComponentNode, RenderNode } from './vnode';\n\n/**\n * 根据虚拟节点创建dom节点\n * @param {*} vnode \n */\nfunction createElement(vnode) {\n  let element = null;\n  if (vnode instanceof VTextNode) {\n    vnode.element = document.createTextNode(vnode.text);\n  } else if (vnode instanceof VNormalNode) {\n    vnode.element = document.createElement(vnode.tag);\n  } else if (vnode instanceof VComponentNode) {\n    // 组件节点\n    const componentRenderNode = vnode.renderVNode;\n    createElement(componentRenderNode);\n  }\n}\n\n/**\n * 移除dom节点\n * @param {*} vnode \n */\nfunction removeElement(vnode) {\n  if (vnode.element) {\n    vnode.element.remove();\n  }\n}\n\n/**\n * 节点替换\n * @param {*} vnode \n * @param {*} replacement \n */\nfunction replaceElement(vnode, replacement) {\n\n  if (vnode instanceof RenderNode && replacement instanceof RenderNode) {\n    if (vnode.element && replacement.element) {\n      vnode.element.replaceWith(replacement.element);\n    }\n  }\n \n}\n\n/**\n * 追加元素\n * \n * @param {*} parentVNode \n * @param {*} childVNode \n */\nfunction appendChild(parentVNode, childVNode) {\n  if (parentVNode && childVNode && parentVNode.element && childVNode.element) {\n    childVNode.parent = parentVNode;\n    parentVNode.element.appendChild(childVNode.element);\n  }\n}\n\n/**\n * 设置属性值\n * \n * @param {*} element \n * @param {*} attrName \n * @param {*} attrValue \n */\nfunction setAttr(element, attrName, attrValue='') {\n  if (element && attrName) {\n    element.setAttribute(attrName, attrValue);\n  }\n}\n\n/**\n * 移除属性\n * @param {*} element \n * @param {*} attrName \n */\nfunction removeAttr(element, attrName) {\n  if (element && attrName) {\n    element.removeAttribute(attrName);\n  }\n}\n\nexport {\n  createElement,\n  removeElement,\n  replaceElement,\n  appendChild,\n  setAttr,\n  removeAttr\n}","/**\n * 是否为函数\n * @param {*} func \n * @returns \n */\nfunction isFunctionType(func) {\n  return typeof func == 'function';\n}\n\n/**\n * 是否为字符串\n * @param {*} string \n * @returns \n */\nfunction isStringType(string) {\n  return typeof string == 'string';\n}\n\n/**\n * 是否为数字\n * @param {*} number \n * @returns \n */\nfunction isNumberType(number) {\n  return typeof number == 'number';\n}\n\n// 是否为数组\nfunction isArrayType(array) {\n return typeof array == 'array';\n}\n\nexport {\n  isFunctionType,\n  isStringType,\n  isArrayType,\n  isNumberType\n}","\n/**\n * 事件池 Map 结构，使用element元素作为key\n * {\n *    element: {\n *      name:  callback\n *    }\n *    \n * }\n */\nconst eventPool = new Map();\n\n/**\n * 注册dom事件，禁止事件冒泡\n * 使用原生 \n *  addEventListener(事件名, 事件响应函数, 是否为事件捕获)\n * @param {*} element \n *  dom元素节点\n * @param {*} eventType \n *  事件类型：example：click\n * @param {*} handler \n */\nfunction catchEvent(element, eventType, handler) {\n  toggleEvent(element, eventType, handler, false);\n}\n\n/**\n * 注册dom事件，保留事件冒泡\n * @param {*} element \n * @param {*} eventType \n * @param {*} func \n */\nfunction bindEvent(element, eventType, func) {\n  toggleEvent(element, eventType, handler, true);\n}\n\n/**\n * 挂载事件\n * \n * @param {*} element \n * @param {*} eventType \n * @param {*} handler \n * @param {*} propagation 是否冒泡传播事件\n */\nfunction toggleEvent(element, eventType, handler, propagation) {\n  const events = eventHandlersForElement(element, event);\n\n  const wrapHandler = function(e) {\n    if (e && !propagation) {\n      e.stopPropagation();\n    }\n    if (handler) {\n      handler(e);\n    }\n  }\n\n  events[eventType] = wrapHandler;\n\n  element.addEventListener(eventType, wrapHandler);\n\n  eventPool.set(element, events);\n}\n\n/**\n * 移除dom事件\n * @param {*} element \n * @param {*} eventType \n * @param {*} handler \n */\nfunction unbindEvent(element, eventType, handler) {\n  if (element) {\n    if (handler) {\n      element.removeEventListener(eventType, handler);\n    } else {\n      const events = eventHandlersForElement(element);\n      if (events && events[eventType]) {\n        element.removeEventListener(eventType, events[eventType]);\n      }\n    }\n    eventPool.delete(element);\n  }\n}\n\n/**\n * 移除所有事件\n * @param {*} element \n */\nfunction unbindAllEvent(element) {\n  if (element) {\n    const events = eventPool.get(element);\n    if (events) {\n      Object.keys(events).forEach(e => {\n        unbindEvent(element, e, events[e]);\n      });\n    }\n\n    eventPool.delete(element);\n  }\n}\n\n/**\n * 获取element元素所绑定的所有事件集合\n * \n * @param {*} element \n */\nfunction eventHandlersForElement(element, eventName) {\n  let events = eventPool.get(element);\n\n  if (!events) {\n    events = {};\n  }\n\n  return events;\n}\n\nconst validEventBindTypeList = ['bind', 'catch'];\n\nconst eventmap = {\n  'tap': 'click'\n};\n\n/**\n * 是否为事件绑定\n * @param {*} attrName \n */\nfunction isEventAttr(attrName) {\n  if (attrName && attrName.indexOf(':') > 0) {\n    const bindType = attrName.split(':')[0];\n    return validEventBindTypeList.includes(bindType);\n  }\n  return false;\n}\n\n/**\n * 解析事件属性\n * @param {*} attrName \n * @param {*} attrValue \n */\nfunction parseEventAttr(attrName, attrValue) {\n  if (isEventAttr(attrName)) {\n    const bindType = attrName.split(':')[0];\n    let bindEventTypeName = attrName.split(':')[1];\n\n    if (eventmap[bindEventTypeName]) {\n      return { bindType, eventType: eventmap[bindEventTypeName], handler: attrValue };\n    } else {\n      return { bindType, eventType: bindEventTypeName, handler: attrValue };\n    }\n  }\n  return null;\n}\n\n/**\n * 为元素添加事件\n * \n * @param {*} element \n * @param {*} attrName \n * @param {*} attrValue \n */\nfunction event(element, attrName, attrValue) {\n  const { bindType, eventType, handler } = parseEventAttr(attrName);\n  if (bindType == 'bind') {\n    bindEvent(element, eventType, attrValue);\n  } else if (bindType == 'catch') {\n    catchEvent(element, eventType, attrValue);\n  }\n}\n\nexport {\n  catchEvent,\n  bindEvent,\n  unbindEvent,\n  isEventAttr,\n  parseEventAttr,\n  event,\n  unbindAllEvent\n}","import { isFunctionType } from \"./utils\";\nimport { VComponentNode } from \"./vnode\";\n\n/**\n *  组件生命周期 - 组件加载\n */\nfunction lifecycleMounted(vnode) {\n  if (vnode instanceof VComponentNode) {\n    if (vnode.mounted && isFunctionType(vnode.mounted)) {\n      vnode.mounted.apply(vnode, []);\n    } else if (vnode.componentDidMount && isFunctionType(vnode.componentDidMount)) {\n      // 兼容react生命周期\n      vnode.componentDidMount.apply(vnode, []);\n    }\n  }\n}\n\n/**\n *  组件生命周期 - 组件卸载\n */\nfunction lifecycleUnmounted(vnode) {\n  if (vnode instanceof VComponentNode) {\n    if (vnode.unmounted && isFunctionType(vnode.unmounted)) {\n      vnode.unmounted.apply(vnode, []);\n    } else if (vnode.componentWillUnmount && isFunctionType(componentWillUnmount)) {\n      // 兼容react生命周期\n      vnode.componentWillUnmount.apply(vnode, []);\n    }\n  }\n}\n\nexport {\n  lifecycleMounted,\n  lifecycleUnmounted\n}","\nimport { appendChild, createElement, removeAttr, removeElement, replaceElement, setAttr } from \"./dom\";\nimport { event, isEventAttr, parseEventAttr, unbindAllEvent, unbindEvent } from \"./event\";\nimport { lifecycleMounted, lifecycleUnmounted } from \"./lifecycle\";\nimport { isFunctionType } from \"./utils\";\nimport { VComponentNode, VTextNode } from './vnode';\n\nconst PatchType = {\n  // 替换节点\n  REPLACE: 1,\n\n  // 删除节点\n  REMOVE: 2,\n\n  // 追加节点\n  APPEND: 3,\n\n  // 移动节点\n  MOVE: 5,\n\n  // 移除所有\n  REMOVE_ALL: 6,\n\n  // 属性移除\n  REMOVE_ATTR: 7,\n\n  // 属性添加\n  ADD_ATTR: 8,\n\n  // 替换属性\n  REPLACE_ATTR: 9\n};\n\n/**\n * 应用变更\n * @param {*} patches \n */\nfunction patch(patches) {\n  patches.forEach(patch => {\n    const { newVNode, oldVNode, parentNode } = patch;\n    switch(patch.type) {\n      case PatchType.APPEND:\n\n        // 追加dom节点\n        if (parentNode && parentNode.element) {\n\n          // 创建真实dom节点\n          createElement(newVNode);\n\n          // 设置属性\n          setInitialAttr(newVNode);\n\n          // 追加节点\n          appendChild(parentNode, newVNode);\n\n          // 调用组件生命周期函数\n          lifecycleMounted(newVNode);\n\n          // 绑定新事件\n          bindEventForVNode(newVNode);\n          \n          // 创建子元素\n          createChildren(newVNode);\n        }\n        break;\n      case PatchType.MOVE:\n        break;\n      case PatchType.REMOVE:\n        if (oldVNode.element) {\n          // 移除元素上的所有事件\n          unbindAllEvent(oldVNode.element);\n\n          // 移除dom元素\n          removeElement(oldVNode);\n        }\n\n        // 组件卸载\n        lifecycleUnmounted(oldVNode);\n        break;\n      case PatchType.REPLACE:\n\n        /// 完成元素节点替换\n        createElement(newVNode);\n\n        if (newVNode.element && oldVNode.element) {\n          newVNode.parent = parentNode;\n          replaceElement(oldVNode, newVNode);\n        }\n\n        // 设置元素属性\n        setInitialAttr(newVNode);\n\n        /// 完成组件生命周期\n\n        // 新组件加载\n        lifecycleMounted(newVNode);\n\n        // 旧组件卸载\n        lifecycleUnmounted(oldVNode);\n        \n        /// 事件处理\n\n        // 删除旧元素事件\n        if (oldVNode && oldVNode.element) {\n          // 移除元素上的所有事件\n          unbindAllEvent(oldVNode.element);\n        }\n\n        // 绑定新事件\n        bindEventForVNode(newVNode);\n\n        /// 处理子组件\n        createChildren(newVNode);\n\n        break;\n      case PatchType.REPLACE_ATTR:\n\n      case PatchType.ADD_ATTR:\n        // 添加/替换属性\n        if (newVNode.element) {\n          const { attrKey, value } = patch;\n\n          if (isEventAttr(attrKey)) {\n\n            if (oldVNode && oldVNode.element) {\n              const { eventType } = parseEventAttr(attrKey);\n              unbindEvent(oldVNode.element, eventType);\n            }\n  \n            // 绑定新事件\n            bindEventForVNode(newVNode);\n          } else {\n            // 设置属性\n            setAttr(newVNode.element, attrKey, value);\n          }\n        }\n        break;\n      case PatchType.REMOVE_ATTR:\n        // 属性移除\n        if (newVNode.element) {\n          const { attrKey } = patch;\n\n          // 删除属性\n          removeAttr(newVNode.element, attrKey);\n\n          // 如果是事件则移除dom事件\n          if (isEventAttr(key)) {\n            if (oldVNode && oldVNode.element) {\n              const { eventType } = parseEventAttr(attrKey);\n              // 移除元素上的所有事件\n              unbindEvent(oldVNode.element, eventType);\n            }\n          }\n        }\n    }\n  });\n}\n\nfunction createChildren(node) {\n  // 处理子元素\n  if (node.element && node.children && node.children.length > 0) {\n    node.children.forEach(child => {\n      \n      // 创建dom节点\n      createElement(child); \n\n      // 设置节点属性\n      setInitialAttr(child);\n\n      // 为元素绑定事件\n      bindEventForVNode(child);\n\n      // 追加元素\n      appendChild(node, child);\n\n      // 组件加载\n      lifecycleMounted(child);\n\n      if (child.children && child.children.length > 0) {\n        createChildren(child);\n      }\n    });\n  }\n}\n\n// 初始化节点时添加attr\nfunction setInitialAttr(vnode) {\n  if (!(vnode instanceof VComponentNode) && !(vnode instanceof VTextNode)) {\n    const keys = Object.keys(vnode.attr || {});\n    keys.forEach(key => {\n      if (vnode.element && !isEventAttr(key)) {\n        setAttr(vnode.element, key, vnode.attr[key]);\n      }\n    });\n  }\n}\n\n/**\n * 添加事件\n * @param {*} vnode \n */\nfunction bindEventForVNode(vnode) {\n  let node = vnode;\n  if (vnode instanceof VComponentNode) {\n    node = vnode.renderVNode;\n  }\n  if (node.element) {\n    Object.keys(node.attr || {}).forEach(key => {\n      if (isEventAttr(key)) {\n        event(node.element, key, node.attr[key]);\n      }\n    });\n  }\n}\n\nexport {\n  patch, \n  PatchType\n}","\nimport { NodeType, issame, VComponentNode } from \"./vnode\";\nimport { isFunctionType, isStringType } from \"./utils\";\nimport { PatchType } from './patch';\nimport { event, isEventAttr } from \"./event\";\n\n\nfunction diff(newVNode, oldVNode, parentNode) {\n  \n  let patches = [];\n\n  const patch = diffVNode(newVNode, oldVNode, parentNode, patches);\n  \n  const shouldCompareChildren = (patch && (patch.type != PatchType.REMOVE && patch.type != PatchType.REPLACE)) || !patch;\n\n  if (oldVNode && newVNode && shouldCompareChildren) {\n    // 两节点相同，处理后续子元素节点\n\n    if (newVNode.children && newVNode.children.length > 0 && oldVNode.children && oldVNode.children.length > 0) {\n      // 都存在子元素\n      let iteratorChildren = newVNode.children;\n\n      if (newVNode.children.length < oldVNode.children.length) {\n        iteratorChildren = oldVNode.children;\n      }\n\n      iteratorChildren.forEach((_, index) => {\n        let vOldChild = null;\n        let vNewChild = null;\n        if (oldVNode.children.length > index) {\n          vOldChild = oldVNode.children[index];\n        }\n\n        if (newVNode.children.length > index) {\n          vNewChild = newVNode.children[index];\n        }\n\n        const childrenPatches = diff(vNewChild, vOldChild, newVNode);\n        patches = patches.concat(childrenPatches);\n      });\n    } else {\n      \n        if ((!newVNode.children || newVNode.children.length == 0) && (oldVNode.children && oldVNode.children.length > 0)) {\n          // 新节点没有子元素，旧节点存在子元素\n          // 清空子元素\n          patches.push({\n            type: PatchType.REMOVE_ALL,\n            newVNode,\n            oldVNode\n          });\n        } else if ((newVNode.children && newVNode.children.length > 0) && (!oldVNode.children || oldVNode.children.length == 0)) {\n          // 新节点存在子元素，旧节点没有子元素\n          // 添加新元素\n          patches.push({\n            type: PatchType.APPEND_ALL,\n            newVNode,\n            oldVNode\n          });\n        }\n    }\n  }\n\n  return patches;\n}\n\nfunction diffVNode(newVNode, oldVNode, parentNode, patches) {\n\n  let patch = null;\n  if (!newVNode && oldVNode) {\n    \n    patch = {\n      type: PatchType.REMOVE,\n      newVNode,\n      oldVNode,\n      parentNode\n    };\n    patches.push(patch);\n  } else if (newVNode && !oldVNode) {\n    patch = {\n      type: PatchType.APPEND,\n      newVNode,\n      oldVNode,\n      parentNode\n    };\n    patches.push(patch);\n  } else if (newVNode && oldVNode) {\n    // 元素未变更丢弃老的dom\n    if (issame(newVNode, oldVNode)) {\n      newVNode.element = oldVNode.element;\n    }\n\n    if (newVNode) {\n      newVNode.parent = parentNode;\n    }\n    \n    if (newVNode instanceof VComponentNode && oldVNode instanceof VComponentNode) {\n      // 同为组件的情况下\n      if (newVNode.constructor.name == oldVNode.constructor.name) {\n        diffAttr(newVNode, oldVNode, patches);\n        // 组件相同，比较其渲染节点\n        return diffVNode(newVNode.renderVNode, oldVNode.renderVNode, parentNode, patches);\n      } else {\n        // 替换\n        patch = {\n          type: PatchType.REPLACE,\n          newVNode,\n          oldVNode,\n          parentNode\n        };\n        patches.push(patch);\n      }\n    } else {\n      if (newVNode.tag != oldVNode.tag || (newVNode.type == NodeType.Text && newVNode.text != oldVNode.text)) {\n        // 替换\n        patch = {\n          type: PatchType.REPLACE,\n          newVNode,\n          oldVNode,\n          parentNode\n        };\n        patches.push(patch);\n      } else if (newVNode.tag == oldVNode.tag) {\n        // 相同节点，比较属性\n        diffAttr(newVNode, oldVNode, patches);\n      }\n    }\n  }\n\n  return patch;\n}\n\n/**\n * 比较节点属性，此方法中两个节点类型一定相同，且不为文本节点\n * \n * @param {*} newVNode \n * @param {*} oldVNode \n */\nfunction diffAttr(newVNode, oldVNode, patches) {\n\n  if (!patches) {\n    patches = [];\n  }\n\n  if (newVNode instanceof VComponentNode) {\n    // props\n    if (newVNode.propsChanged && isFunctionType(newVNode.propsChanged)) {\n      newVNode.propsChanged.apply(newVNode, [newVNode.props, oldVNode.props]);\n    }\n\n    // 处理ref\n    const ref = newVNode.props.ref;\n    if (ref) {\n      \n      const directParentComponent = findDirectParentComponent(newVNode);\n      if (directParentComponent) {\n\n        if (isFunctionType(ref)) {\n          ref.apply(directParentComponent, [newVNode]);\n        } else if (isStringType(ref)) {\n          directParentComponent.refs[newVNode.props.ref] = newVNode;\n        }\n      }\n    }\n\n  } else {\n    // 比较 attr\n    newVNode.attr = newVNode.attr || {};\n    oldVNode.attr = oldVNode.attr || {};\n    const newAttrSet = Object.keys(newVNode.attr);\n    const oldAttrSet = Object.keys(oldVNode.attr);\n    let maxLength = Math.max(newAttrSet.length, oldAttrSet.length);\n\n    let i = 0;\n    while(i < maxLength) {\n      const key = newAttrSet[i];\n\n      const newValue = newVNode.attr[key];\n      const oldValue = oldVNode.attr[key];\n\n      if (!newValue && oldValue) {\n        // 新值无，旧值有，移除\n        patches.push({\n          newVNode,\n          oldVNode,\n          attrKey: key,\n          type: PatchType.REMOVE_ATTR\n        });\n      } else if (newValue && !oldValue) {\n        // 新值有，旧值无，添加\n        patches.push({\n          newVNode,\n          oldVNode,\n          attrKey: key,\n          value: newValue,\n          type: PatchType.ADD_ATTR\n        });\n      } else if (newValue && oldValue) {\n        // 都有值，比较值内容\n        if (newValue !== oldValue) {\n          // 替换\n          patches.push({\n            newVNode,\n            oldVNode,\n            attrKey: key,\n            value: newValue,\n            type: PatchType.REPLACE_ATTR\n          });\n        }\n      }\n      \n      i++;\n    }\n  }\n}\n\n\n// 向上查找 component \nfunction findDirectParentComponent(node) {\n  if (node) {\n    if (node.parent) {\n      if (node.parent.holder) {\n        return node.parent.holder;\n      } else {\n        return findDirectParentComponent(node.parent);\n      }\n    }\n  }\n  return null;\n}\n\nexport {\n  PatchType,\n  diff\n}","import { createElement } from './dom';\nimport { diff } from './diff';\nimport { VComponentNode } from './vnode';\nimport { patch } from './patch';\nimport { isFunctionType } from './utils';\n\nclass Component extends VComponentNode {\n\n  refs;\n\n  constructor(props) {\n    super();\n    this.refs = {};\n    if (!props) {\n      props = {};\n    }\n    \n    // 单项数据\n    this.props = JSON.parse(JSON.stringify(props));\n  }\n\n  propsChanged(newProps, oldProps) {\n\n  }\n\n  shouldComponentUpdate() {\n    return true;\n  }\n\n  setData(data, complete) {\n    \n    this.data = Object.assign({}, this.data, data);\n\n    if (this.render) {\n      const newVNode = this.render();\n      if (newVNode) {\n        newVNode.holder = this;\n      }\n      const patches = diff(newVNode, this.renderVNode, this.parent);\n\n      patch(patches);\n\n      this.renderVNode = newVNode;\n    }\n    if (complete) {\n      complete.apply(this, []);\n    }\n  }\n\n  render() {\n    return null;\n  }\n\n  forceUpdate() {\n    const newVNode = this.render();\n    newVNode.holder = this;\n    const patches = diff(newVNode, null, this.parent);\n    patch(patches);\n  }\n\n  get children() {\n    if (this.renderVNode) {\n      return this.renderVNode.children;\n    }\n    return [];\n  }\n\n  get element() {\n    if (this.renderVNode) {\n      return this.renderVNode.element;\n    }\n    return null;\n  }\n\n  set element(newElement) {\n    if (this.renderVNode) {\n      this.renderVNode.element = newElement;\n    }\n  }\n}\n\n/**\n * 根据配置构建Component实例\n * @param {*} CC 组件类名\n */\nfunction c(CC) {\n  return function(props) {\n    const component = new CC(props);\n\n    const { lifetime } = props;\n  \n    if (lifetime) {\n      let { created, attached, destroyed } = lifetime;\n  \n      if (created && isFunctionType(created)) {\n        created.apply(component, []);\n      }\n  \n      if (attached && isFunctionType(attached)) {\n        attached = attached.bind(component);\n        component.mounted = attached;\n      }\n  \n      if (destroyed && isFunctionType(destroyed)) {\n        destroyed = destroyed.bind(component);\n        component.unmounted = destroyed;\n      }\n    }\n  \n    return component;\n  }\n}\n\nexport {\n  Component,\n  c\n}","import { VNormalNode, VTextNode } from './vnode';\nimport { Component } from './component';\nimport { isArrayType, isFunctionType, isNumberType, isStringType } from './utils';\nlet id = 1;\n\nfunction h(tag, attr, children) {\n  let node = new VNormalNode(tag, attr, children);\n  node.id = ++id;\n  if (children && children.length > 0) {\n\n    const flatedChildren = flatDeep(children, Infinity);\n\n    const newChildren = flatedChildren.map(child => {\n      let newChildNode = child;\n      if (newChildNode instanceof Component) {\n\n        // 根据组件中的是否需要渲染组件进行判断, 首次渲染不调用 shouldComponentUpdate 函数\n        let isNeedRender = true;\n        if (newChildNode.shouldComponentUpdate && isFunctionType(newChildNode.shouldComponentUpdate)) {\n          isNeedRender = newChildNode.shouldComponentUpdate.apply(newChildNode, []);\n        }\n\n        if (isNeedRender) {\n          const renderedVNode = newChildNode.render();\n\n          // 指定组件的渲染内容\n          newChildNode.renderVNode = renderedVNode;\n          // 指定节点所属组件\n          renderedVNode.holder = newChildNode;\n        }\n      } else if (isStringType(child) || isNumberType(child)) {\n        // 字符串类型\n        newChildNode = text(child);\n      }\n\n      newChildNode.parent = node;\n      return newChildNode;\n    });\n    node.children = newChildren;\n  }\n  return node;\n}\n\n\n\nfunction text(content) {\n  let node = new VTextNode(content);\n  node.id = ++id;\n  return node;\n}\n\nfunction flatDeep(arr, d = 1) {\n  return d > 0 ? arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flatDeep(val, d - 1) : val), [])\n               : arr.slice();\n}\n\nexport {\n  h,\n  text\n}","import { VNormalNode, VTextNode } from './vnode';\nimport { createElement } from './dom';\nimport { h, text } from './h';\nimport { Component, c } from './component';\nimport { diff } from './diff';\nimport { patch } from './patch';\n\n/**\n * 初始化渲染\n * \n * @param {*} rootElement \n * @param {*} component \n */\nfunction render(rootElement, component) {\n\n  // 初始化根组件节点\n  const newVNode = component.render();\n  // 首次加载，初始化根节点\n  const rootNode = h(rootElement.tagName, {}, [component]);\n  rootNode.element = rootElement;\n\n  // 设置组件父节点\n  component.parent = rootNode;\n  component.renderVNode = newVNode;\n  // 设置节点所属组件\n  newVNode.holder = component;\n  const patches = diff(component, null, rootNode);\n\n  // 应用diff内容\n  patch(patches);\n\n  component.renderVNode = newVNode;\n}\n\nconst Tiny = { c, h, Component, render };\n\nexport default Tiny;\n\nexport {\n  Component\n}"],"names":["NodeType","RenderNode","Object","parent","VNormalNode","tag","attr","children","element","type","holder","constructor","super","this","VTextNode","text","VComponentNode","renderVNode","createElement","vnode","document","createTextNode","appendChild","parentVNode","childVNode","setAttr","attrName","attrValue","setAttribute","isFunctionType","func","isStringType","string","eventPool","Map","bindEvent","eventType","toggleEvent","handler","propagation","events","eventHandlersForElement","wrapHandler","e","stopPropagation","addEventListener","set","unbindEvent","removeEventListener","delete","unbindAllEvent","get","keys","forEach","eventName","validEventBindTypeList","eventmap","tap","isEventAttr","indexOf","bindType","split","includes","parseEventAttr","bindEventTypeName","event","catchEvent","lifecycleMounted","mounted","apply","componentDidMount","lifecycleUnmounted","unmounted","componentWillUnmount","PatchType","REPLACE","REMOVE","APPEND","MOVE","REMOVE_ALL","REMOVE_ATTR","ADD_ATTR","REPLACE_ATTR","patch","patches","newVNode","oldVNode","parentNode","setInitialAttr","bindEventForVNode","createChildren","remove","replacement","replaceWith","replaceElement","attrKey","value","removeAttribute","key","node","length","child","diff","diffVNode","shouldCompareChildren","iteratorChildren","_","index","vOldChild","vNewChild","childrenPatches","concat","push","APPEND_ALL","n2","n1","undefined","name","diffAttr","propsChanged","props","ref","directParentComponent","findDirectParentComponent","refs","newAttrSet","oldAttrSet","maxLength","Math","max","i","newValue","oldValue","Component","JSON","parse","stringify","newProps","oldProps","shouldComponentUpdate","setData","data","complete","assign","render","forceUpdate","newElement","id","h","newChildren","flatDeep","Infinity","map","newChildNode","isNeedRender","renderedVNode","content","arr","d","reduce","acc","val","Array","isArray","slice","Tiny","c","CC","component","lifetime","created","attached","destroyed","bind","rootElement","rootNode","tagName"],"mappings":"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"}